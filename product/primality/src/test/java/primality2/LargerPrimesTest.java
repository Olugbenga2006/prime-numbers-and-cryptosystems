package primality2;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.math.BigInteger;

class LargerPrimesTest {
    private LargerPrimes largerPrimesChecker;

    @BeforeEach
    public void setUp() {
        largerPrimesChecker = new LargerPrimes();
    }

    @Test
    public void testIsPrime_WithLargePrime1() {
        // Test a known large prime number with 30 digits
        BigInteger largePrime1 = new BigInteger("636093585352712707633611402517");
        assertTrue(largerPrimesChecker.isPrime(largePrime1,5), "636093585352712707633611402517 should be prime.");
    }

    @Test
    public void testIsPrime_WithLargePrime2() {
        // Test a known large prime number with 40 digits
        BigInteger largePrime2 = new BigInteger("3670373232436798233752740931578068777707");
        assertTrue(largerPrimesChecker.isPrime(largePrime2,5), "3670373232436798233752740931578068777707 should be prime.");
    }
    @Test
    public void testIsPrime_WithLargePrime3() {
        // Test a known large prime number with 70 digits
        BigInteger largePrime3 = new BigInteger("3306255143249535762725215783282813901982286552958066097386549634901033");
        assertTrue(largerPrimesChecker.isPrime(largePrime3,5), "3306255143249535762725215783282813901982286552958066097386549634901033 should be prime.");
    }
    @Test
    public void testIsPrime_WithLargePrime4() {
        // Test a known large prime number with 200 digits
        BigInteger largePrime4 = new BigInteger("84480248448081452257668856369225076520225591347950741457698755694187073835274168220758444289342689715106769742554568945911355262656562652414251609357801774840095947028519555119850032559423832765791073");
        assertTrue(largerPrimesChecker.isPrime(largePrime4,5), "84480248448081452257668856369225076520225591347950741457698755694187073835274168220758444289342689715106769742554568945911355262656562652414251609357801774840095947028519555119850032559423832765791073 should be prime.");
    }
    
    @Test
    public void testIsPrime_With_300digit_Prime() {
        // Test a known large prime number with 300 digits 
        BigInteger largePrime5 = new BigInteger("966115976569367214270556544915769925940544530196878390669871717650298934008668972594440213832325636571387346702217946434707460088582259540361194892910171986784380227412758863824090881265847423369932172527434566190839173556092472312908395853581480457236472303204220227718121821002894701992133782057657");
        assertTrue(largerPrimesChecker.isPrime(largePrime5,40), "966115976569367214270556544915769925940544530196878390669871717650298934008668972594440213832325636571387346702217946434707460088582259540361194892910171986784380227412758863824090881265847423369932172527434566190839173556092472312908395853581480457236472303204220227718121821002894701992133782057657 should be prime.");
    }
    
 

    @Test
    public void testIsPrime_WithLargeComposite1() {
        BigInteger largeComposite1 = new BigInteger("1000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); // Even number
        assertFalse(largerPrimesChecker.isPrime(largeComposite1,5), "1000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000should not be prime.");
    }
    
    @Test
    public void testIsPrime_With_2048bit_composite() {
      BigInteger largeComposite2 = new BigInteger("25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357");
      assertFalse(largerPrimesChecker.isPrime(largeComposite2,40), "25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357");
  }
}
